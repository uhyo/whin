// Generated by CoffeeScript 1.6.3
(function() {
  var IO, fs, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  IO = (function() {
    function IO() {}

    IO.prototype.readChar = function(callback) {};

    IO.prototype.readLine = function(callback) {};

    IO.prototype.readAll = function(callback) {};

    IO.prototype.end = function() {};

    IO.prototype.write = function(str) {};

    return IO;

  })();

  exports.FileLoader = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      _ref = _Class.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    _Class.prototype.load = function(filepath, callback) {
      var _this = this;
      this.filepath = filepath;
      return fs.readFile(this.filepath, {
        encoding: "utf8"
      }, function(err, data) {
        if (err != null) {
          throw err;
        }
        _this.data = data.replace(/\r\n/g, "\n").replace(/\r/g, "");
        return callback();
      });
    };

    _Class.prototype.readChar = function(callback) {
      var char;
      if (this.data.length) {
        char = this.data[0];
        this.data = this.data.slice(1);
        return callback(char);
      } else {
        return callback(null);
      }
    };

    _Class.prototype.readLine = function(callback) {
      var line, result;
      if (this.data.length) {
        result = this.data.match(/^(.*)(?:\n|$)/);
        if (result != null) {
          line = result[1];
          this.data = this.data.slice(result[0].length);
          return callback(line);
        } else {
          return callback(null);
        }
      } else {
        return callback(null);
      }
    };

    _Class.prototype.readAll = function(callback) {
      var data;
      data = this.data;
      this.data = "";
      return callback(data);
    };

    return _Class;

  })(IO);

  exports.Console = (function(_super) {
    __extends(_Class, _super);

    function _Class() {
      process.stdin.setEncoding("utf8");
      process.stdin.setRawMode(true);
    }

    _Class.prototype.end = function() {
      return process.exit(0);
    };

    _Class.prototype.write = function(str) {
      return process.stdout.write(str);
    };

    _Class.prototype.readChar = function(callback) {
      var char;
      char = process.stdin.read(1);
      if (char != null) {
        return callback(char);
      } else {
        process.stdin.resume();
        return process.stdin.once("data", function(chunk) {
          if (chunk === "\u0003") {
            process.exit(0);
          }
          if (chunk === "\r") {
            chunk = "\n";
          }
          process.stdin.pause();
          process.stdout.write(chunk);
          return callback(chunk);
        });
      }
    };

    _Class.prototype.readLine = function(callback) {
      var check, line,
        _this = this;
      line = "";
      check = function() {
        return _this.readChar(function(char) {
          line += char;
          if (char === "\n") {
            callback(line);
            return;
          }
          return check();
        });
      };
      return check();
    };

    return _Class;

  })(IO);

}).call(this);
