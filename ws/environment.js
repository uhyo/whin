// Generated by CoffeeScript 1.6.3
(function() {
  var Program, WSEnvironment, io, operations;

  io = require('./io');

  operations = require('./operations');

  Program = (function() {
    function Program(env) {
      this.env = env;
      this.pointer = 0;
      this.ops = [];
    }

    Program.prototype.load = function(io, callback) {
      var _this = this;
      this.parser = new operations.Parser(io);
      return this.parser.parse(this.env.debugMode, function(ops) {
        _this.ops = ops;
        return callback();
      });
    };

    Program.prototype.run = function() {
      var debug, env, op, ops, _results,
        _this = this;
      env = this.env;
      debug = env.debugMode;
      ops = this.ops;
      _results = [];
      while (true) {
        op = ops[this.pointer];
        if (debug) {
          process.stdout.write(("step" + this.pointer + ":").yellow);
          op.log(env);
        }
        if (op == null) {
          process.exit(0);
          break;
        }
        if (op.on) {
          op.on(env);
          _results.push(this.pointer++);
        } else if (op.run) {
          op.run(env, function() {
            _this.pointer++;
            return _this.run();
          });
          break;
        } else {
          _results.push(this.pointer++);
        }
      }
      return _results;
    };

    Program.prototype.step = function(callback) {
      var _this = this;
      return this.getOperation(this.pointer, function(op) {
        return op.run(_this.env, function() {
          _this.pointer++;
          return callback();
        });
      });
    };

    Program.prototype.getOperation = function(cursor, callback) {
      var check, index,
        _this = this;
      if (this.ops.length > cursor) {
        callback(this.ops[cursor]);
        return;
      }
      index = this.ops.length;
      check = function() {
        return _this.parser.nextOperation(function(op) {
          if (_this.env.debugMode) {
            console.log(("(" + op + ")").red);
          }
          _this.ops[index] = op;
          index++;
          if (index >= cursor) {
            return callback(op);
          } else {
            return check();
          }
        });
      };
      return check();
    };

    Program.prototype.findLabel = function(label) {
      var op, pos, _i, _ref;
      for (pos = _i = 0, _ref = this.ops.length; 0 <= _ref ? _i < _ref : _i > _ref; pos = 0 <= _ref ? ++_i : --_i) {
        op = this.ops[pos];
        if (op.isLabel(label)) {
          return pos;
        }
      }
      throw new Error("Cannot find label '" + label + "'");
    };

    return Program;

  })();

  WSEnvironment = (function() {
    function WSEnvironment(io) {
      this.io = io;
      this.stack = [];
      this.heap = {};
      this.callstack = [];
      this.labels = {};
      this.program = new Program(this);
      this.debugMode = null;
    }

    WSEnvironment.prototype.loadFile = function(filepath, callback) {
      var loader,
        _this = this;
      loader = new io.FileLoader;
      return loader.load(filepath, function() {
        return _this.program.load(loader, function() {
          return callback();
        });
      });
    };

    WSEnvironment.prototype.debug = function(debugMode) {
      this.debugMode = debugMode;
      if (this.debugMode) {
        return require('colors');
      }
    };

    WSEnvironment.prototype.run = function() {
      return this.program.run();
    };

    WSEnvironment.prototype.findLabel = function(label) {
      var pos;
      if (this.labels[label] != null) {
        return this.labels[label];
      } else {
        pos = this.program.findLabel(label);
        this.labels[label] = pos;
        return pos;
      }
    };

    WSEnvironment.prototype.push = function(number) {
      this.stack.push(number);
    };

    WSEnvironment.prototype.pop = function(number) {
      this.sassure(1);
      return this.stack.pop();
    };

    WSEnvironment.prototype.top = function() {
      return this.stack[this.stack.length - 1] || 0;
    };

    WSEnvironment.prototype.nth = function(n) {
      var ref;
      ref = this.stack[this.stack.length - 1 - n];
      if (ref == null) {
        throw new Error("Stack underflow");
      }
      return ref;
    };

    WSEnvironment.prototype.sassure = function(n) {
      if (this.stack.length < n || n < 0) {
        throw new Error("Stack underflow");
      }
    };

    WSEnvironment.prototype.store = function(pos, value) {
      return this.heap[pos] = value;
    };

    WSEnvironment.prototype.retrieve = function(pos) {
      var ref;
      return ref = this.heap[pos] || 0;
      /*
      unless ref?
          throw new Error "Heap overflow"
      ref
      */

    };

    return WSEnvironment;

  })();

  exports.WSEnvironment = WSEnvironment;

}).call(this);
