// Generated by CoffeeScript 1.6.3
(function() {
  var Add, Call, Copy, Discard, Divide, Duplicate, End, Jump, JumpNegative, JumpZero, Label, LabelParamed, Modulo, Multiply, NumberParamed, Operation, OutputChar, OutputNumber, Parser, Push, ReadChar, ReadNumber, Retrieve, Return, Slide, Store, Subtract, Swap, exports, ops, opsTable, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Operation = (function() {
    function Operation() {}

    /*
    on:(env)->
    run:(env,callback)->
        @log env
        @on env
        callback()
    */


    Operation.code = "";

    Operation.prototype.log = function(env) {
      if (env.debugMode) {
        return console.log(this.toString().blue);
      }
    };

    Operation.prototype.isLabel = function(label) {
      return false;
    };

    Operation.prototype.toString = function() {
      return this.constructor.name;
    };

    Operation.prototype.getCode = function() {
      return this.constructor.code;
    };

    return Operation;

  })();

  NumberParamed = (function(_super) {
    __extends(NumberParamed, _super);

    NumberParamed.param = "number";

    function NumberParamed(number) {
      this.number = number;
    }

    NumberParamed.prototype.toString = function() {
      return "" + NumberParamed.__super__.toString.apply(this, arguments) + "(" + this.number + ")";
    };

    NumberParamed.prototype.getCode = function() {
      var num, result;
      result = "";
      num = Math.abs(this.number);
      while (num > 0) {
        if (num % 2 === 1) {
          result = "\t" + result;
          num--;
        } else {
          result = " " + result;
        }
        num /= 2;
      }
      if (this.number >= 0) {
        result = " " + result + "\n";
      } else {
        result = "\t" + result + "\n";
      }
      return this.constructor.code + result;
    };

    return NumberParamed;

  })(Operation);

  LabelParamed = (function(_super) {
    __extends(LabelParamed, _super);

    LabelParamed.param = "label";

    function LabelParamed(label) {
      this.label = label;
    }

    LabelParamed.prototype.toString = function() {
      return "" + LabelParamed.__super__.toString.apply(this, arguments) + "(" + this.label + ")";
    };

    LabelParamed.prototype.getCode = function() {
      return this.constructor.code + this.label + "\n";
    };

    return LabelParamed;

  })(Operation);

  ops = exports = module.exports = {
    stack: {
      Push: Push = (function(_super) {
        __extends(Push, _super);

        function Push() {
          _ref = Push.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        Push.prototype.on = function(env) {
          return env.push(this.number);
        };

        return Push;

      })(NumberParamed),
      Duplicate: Duplicate = (function(_super) {
        __extends(Duplicate, _super);

        function Duplicate() {
          _ref1 = Duplicate.__super__.constructor.apply(this, arguments);
          return _ref1;
        }

        Duplicate.prototype.on = function(env) {
          return env.push(env.stack[env.stack.length - 1]);
        };

        return Duplicate;

      })(Operation),
      Copy: Copy = (function(_super) {
        __extends(Copy, _super);

        function Copy() {
          _ref2 = Copy.__super__.constructor.apply(this, arguments);
          return _ref2;
        }

        Copy.prototype.on = function(env) {
          return env.push(env.nth(this.number));
        };

        return Copy;

      })(NumberParamed),
      Swap: Swap = (function(_super) {
        __extends(Swap, _super);

        function Swap() {
          _ref3 = Swap.__super__.constructor.apply(this, arguments);
          return _ref3;
        }

        Swap.prototype.on = function(env) {
          var le, tmp;
          env.sassure(1);
          le = env.stack.length - 1;
          tmp = env.stack[le];
          env.stack[le] = env.stack[le - 1];
          return env.stack[le - 1] = tmp;
        };

        return Swap;

      })(Operation),
      Discard: Discard = (function(_super) {
        __extends(Discard, _super);

        function Discard() {
          _ref4 = Discard.__super__.constructor.apply(this, arguments);
          return _ref4;
        }

        Discard.prototype.on = function(env) {
          env.sassure(0);
          return env.pop();
        };

        return Discard;

      })(Operation),
      Slide: Slide = (function(_super) {
        __extends(Slide, _super);

        function Slide() {
          _ref5 = Slide.__super__.constructor.apply(this, arguments);
          return _ref5;
        }

        Slide.prototype.on = function(env) {
          var idx, stack;
          stack = env.stack;
          idx = stack.length - 1 - this.number;
          env.sassure(this.number);
          return env.stack.splice(idx, this.number);
        };

        return Slide;

      })(Operation)
    },
    arithmetic: {
      Add: Add = (function(_super) {
        __extends(Add, _super);

        function Add() {
          _ref6 = Add.__super__.constructor.apply(this, arguments);
          return _ref6;
        }

        Add.prototype.on = function(env) {
          var ls;
          env.sassure(1);
          ls = env.stack.length - 1;
          env.stack[ls - 1] += env.stack[ls];
          return env.stack.length--;
        };

        return Add;

      })(Operation),
      Subtract: Subtract = (function(_super) {
        __extends(Subtract, _super);

        function Subtract() {
          _ref7 = Subtract.__super__.constructor.apply(this, arguments);
          return _ref7;
        }

        Subtract.prototype.on = function(env) {
          var ls;
          env.sassure(1);
          ls = env.stack.length - 1;
          env.stack[ls - 1] -= env.stack[ls];
          return env.stack.length--;
        };

        return Subtract;

      })(Operation),
      Multiply: Multiply = (function(_super) {
        __extends(Multiply, _super);

        function Multiply() {
          _ref8 = Multiply.__super__.constructor.apply(this, arguments);
          return _ref8;
        }

        Multiply.prototype.on = function(env) {
          var ls;
          env.sassure(1);
          ls = env.stack.length - 1;
          env.stack[ls - 1] *= env.stack[ls];
          return env.stack.length--;
        };

        return Multiply;

      })(Operation),
      Divide: Divide = (function(_super) {
        __extends(Divide, _super);

        function Divide() {
          _ref9 = Divide.__super__.constructor.apply(this, arguments);
          return _ref9;
        }

        Divide.prototype.on = function(env) {
          var ls;
          env.sassure(1);
          ls = env.stack.length - 1;
          env.stack[ls - 1] = env.stack[ls - 1] / env.stack[ls] | 0;
          return env.stack.length--;
        };

        return Divide;

      })(Operation),
      Modulo: Modulo = (function(_super) {
        __extends(Modulo, _super);

        function Modulo() {
          _ref10 = Modulo.__super__.constructor.apply(this, arguments);
          return _ref10;
        }

        Modulo.prototype.on = function(env) {
          var ls;
          env.sassure(1);
          ls = env.stack.length - 1;
          env.stack[ls - 1] %= env.stack[ls];
          return env.stack.length--;
        };

        return Modulo;

      })(Operation)
    },
    heap: {
      Store: Store = (function(_super) {
        __extends(Store, _super);

        function Store() {
          _ref11 = Store.__super__.constructor.apply(this, arguments);
          return _ref11;
        }

        Store.prototype.on = function(env) {
          var num, pos;
          num = env.pop();
          pos = env.pop();
          return env.store(pos, num);
        };

        return Store;

      })(Operation),
      Retrieve: Retrieve = (function(_super) {
        __extends(Retrieve, _super);

        function Retrieve() {
          _ref12 = Retrieve.__super__.constructor.apply(this, arguments);
          return _ref12;
        }

        Retrieve.prototype.on = function(env) {
          return env.push(env.retrieve(env.pop()));
        };

        return Retrieve;

      })(Operation)
    },
    flow: {
      Label: Label = (function(_super) {
        __extends(Label, _super);

        function Label() {
          _ref13 = Label.__super__.constructor.apply(this, arguments);
          return _ref13;
        }

        Label.prototype.isLabel = function(label) {
          return label === this.label;
        };

        return Label;

      })(LabelParamed),
      Call: Call = (function(_super) {
        __extends(Call, _super);

        function Call() {
          _ref14 = Call.__super__.constructor.apply(this, arguments);
          return _ref14;
        }

        Call.prototype.on = function(env) {
          var pos;
          pos = env.findLabel(this.label);
          env.callstack.push(env.program.pointer);
          return env.program.pointer = pos;
        };

        return Call;

      })(LabelParamed),
      Jump: Jump = (function(_super) {
        __extends(Jump, _super);

        function Jump() {
          _ref15 = Jump.__super__.constructor.apply(this, arguments);
          return _ref15;
        }

        Jump.prototype.on = function(env) {
          var pos;
          pos = env.findLabel(this.label);
          return env.program.pointer = pos;
        };

        return Jump;

      })(LabelParamed),
      JumpZero: JumpZero = (function(_super) {
        __extends(JumpZero, _super);

        function JumpZero() {
          _ref16 = JumpZero.__super__.constructor.apply(this, arguments);
          return _ref16;
        }

        JumpZero.prototype.on = function(env) {
          var n, pos;
          n = env.pop();
          if (n === 0) {
            pos = env.findLabel(this.label);
            return env.program.pointer = pos;
          }
        };

        return JumpZero;

      })(LabelParamed),
      JumpNegative: JumpNegative = (function(_super) {
        __extends(JumpNegative, _super);

        function JumpNegative() {
          _ref17 = JumpNegative.__super__.constructor.apply(this, arguments);
          return _ref17;
        }

        JumpNegative.prototype.on = function(env) {
          var n, pos;
          n = env.pop();
          if (n < 0) {
            pos = env.findLabel(this.label);
            return env.program.pointer = pos;
          }
        };

        return JumpNegative;

      })(LabelParamed),
      Return: Return = (function(_super) {
        __extends(Return, _super);

        function Return() {
          _ref18 = Return.__super__.constructor.apply(this, arguments);
          return _ref18;
        }

        Return.prototype.on = function(env) {
          var bt;
          bt = env.callstack.pop();
          if (bt == null) {
            throw new Error("Callstack underflow");
          }
          return env.program.pointer = bt;
        };

        return Return;

      })(Operation),
      End: End = (function(_super) {
        __extends(End, _super);

        function End() {
          _ref19 = End.__super__.constructor.apply(this, arguments);
          return _ref19;
        }

        End.prototype.on = function(env) {
          return env.io.end();
        };

        return End;

      })(Operation)
    },
    io: {
      OutputChar: OutputChar = (function(_super) {
        __extends(OutputChar, _super);

        function OutputChar() {
          _ref20 = OutputChar.__super__.constructor.apply(this, arguments);
          return _ref20;
        }

        OutputChar.prototype.on = function(env) {
          return env.io.write(String.fromCharCode(env.pop()));
        };

        return OutputChar;

      })(Operation),
      OutputNumber: OutputNumber = (function(_super) {
        __extends(OutputNumber, _super);

        function OutputNumber() {
          _ref21 = OutputNumber.__super__.constructor.apply(this, arguments);
          return _ref21;
        }

        OutputNumber.prototype.on = function(env) {
          return env.io.write(env.pop().toString(10));
        };

        return OutputNumber;

      })(Operation),
      ReadChar: ReadChar = (function(_super) {
        __extends(ReadChar, _super);

        function ReadChar() {
          _ref22 = ReadChar.__super__.constructor.apply(this, arguments);
          return _ref22;
        }

        ReadChar.prototype.run = function(env, callback) {
          return env.io.readChar(function(char) {
            env.store(env.pop(), char.charCodeAt(0));
            return callback();
          });
        };

        return ReadChar;

      })(Operation),
      ReadNumber: ReadNumber = (function(_super) {
        __extends(ReadNumber, _super);

        function ReadNumber() {
          _ref23 = ReadNumber.__super__.constructor.apply(this, arguments);
          return _ref23;
        }

        ReadNumber.prototype.run = function(env, callback) {
          return env.io.readLine(function(line) {
            var num;
            num = parseInt(line);
            if (isNaN(num)) {
              throw new Error("Cannot parse number");
            }
            env.store(env.pop(), num);
            return callback();
          });
        };

        return ReadNumber;

      })(Operation)
    }
  };

  exports.Parser = Parser = (function() {
    function Parser(io) {
      this.io = io;
    }

    Parser.prototype.readChar = function(callback) {
      var check, io;
      io = this.io;
      check = function(char) {
        if ((char == null) || (char === " " || char === "\t" || char === "\n")) {
          return callback(char);
        } else {
          return io.readChar(check);
        }
      };
      return io.readChar(check);
    };

    Parser.prototype.parse = function(debug, callback) {
      var _this = this;
      return this.io.readAll(function(data) {
        var char, chars, chs, index, len, obj, op, operations, readChar, readLabel, readNumber;
        chars = "";
        obj = opsTable;
        index = 0;
        len = data.length;
        operations = [];
        readChar = function() {
          var char;
          while (true) {
            char = data[index];
            if (debug) {
              process.stdout.write(((function() {
                switch (char) {
                  case " ":
                    return "[SP]";
                  case "\t":
                    return "[TB]";
                  case "\n":
                    return "[LF]";
                  default:
                    return String(char);
                }
              })()).grey);
            }
            index++;
            if (char !== " " && char !== "\t" && char !== "\n") {
              continue;
            }
            return char;
          }
          return null;
        };
        readNumber = function() {
          var char, num, sign;
          num = 0;
          sign = 0;
          switch (readChar()) {
            case " ":
              sign = 1;
              break;
            case "\t":
              sign = -1;
              break;
            default:
              throw new Error("Invalid number");
          }
          while (true) {
            char = readChar();
            if (char == null) {
              throw new Error("Unexpected end of input");
            }
            switch (char) {
              case " ":
                num *= 2;
                break;
              case "\t":
                num = 2 * num + 1;
                break;
              case "\n":
                return num;
            }
          }
        };
        readLabel = function() {
          var char, label;
          label = "";
          while (true) {
            char = readChar();
            if (char == null) {
              throw new Error("Unexpected end of input");
            }
            switch (char) {
              case " ":
              case "\t":
                label += char;
                break;
              case "\n":
                return label;
            }
          }
        };
        while (index < len) {
          char = data[index];
          if (debug) {
            process.stdout.write(((function() {
              switch (char) {
                case " ":
                  return "[SP]";
                case "\t":
                  return "[TB]";
                case "\n":
                  return "[LF]";
                default:
                  return String(char);
              }
            })()).grey);
          }
          index++;
          if (char !== " " && char !== "\t" && char !== "\n") {
            continue;
          }
          chars += char;
          obj = obj[char];
          if ("function" === typeof obj) {
            op = null;
            switch (obj.param) {
              case "number":
                op = new obj(readNumber());
                break;
              case "label":
                op = new obj(readLabel());
                break;
              default:
                op = new obj;
            }
            if (debug) {
              console.log(op.toString().red);
            }
            operations.push(op);
            chars = "";
            obj = opsTable;
          } else if (obj == null) {
            chs = chars.replace(/\t/g, "[TB]").replace(/\n/g, "[LF]").replace(/\s/g, "[SP]");
            throw new Error("Cannot parse '" + chs + "'");
          }
        }
        if (chars !== "") {
          chs = chars.replace(/\t/g, "[TB]").replace(/\n/g, "[LF]").replace(/\s/g, "[SP]");
          throw new Error("Cannot parse '" + chs + "'");
        }
        return callback(operations);
      });
    };

    Parser.prototype.nextOperation = function(callback) {
      var chars, check, obj,
        _this = this;
      obj = opsTable;
      chars = "";
      check = function(char) {
        var chs;
        if (char == null) {
          throw new Error("Unexpected end of input");
        }
        chars += char;
        obj = obj[char];
        if ("function" === typeof obj) {
          switch (obj.param) {
            case "number":
              return _this.readNumber(function(num) {
                return callback(new obj(num));
              });
            case "label":
              return _this.readLabel(function(label) {
                return callback(new obj(label));
              });
            default:
              return callback(new obj);
          }
        } else if (obj == null) {
          chs = chars.replace(/\t/g, "[TB]").replace(/\n/g, "[LF]").replace(/\s/g, "[SP]");
          throw new Error("Cannot parse '" + chs + "'");
        } else {
          return _this.readChar(check);
        }
      };
      return this.readChar(check);
    };

    return Parser;

  })();

  opsTable = {
    " ": {
      " ": ops.stack.Push,
      "\t": {
        " ": ops.stack.Copy,
        "\n": ops.stack.Slide
      },
      "\n": {
        " ": ops.stack.Duplicate,
        "\t": ops.stack.Swap,
        "\n": ops.stack.Discard
      }
    },
    "\t": {
      " ": {
        " ": {
          " ": ops.arithmetic.Add,
          "\t": ops.arithmetic.Subtract,
          "\n": ops.arithmetic.Multiply
        },
        "\t": {
          " ": ops.arithmetic.Divide,
          "\t": ops.arithmetic.Modulo
        }
      },
      "\t": {
        " ": ops.heap.Store,
        "\t": ops.heap.Retrieve
      },
      "\n": {
        " ": {
          " ": ops.io.OutputChar,
          "\t": ops.io.OutputNumber
        },
        "\t": {
          " ": ops.io.ReadChar,
          "\t": ops.io.ReadNumber
        }
      }
    },
    "\n": {
      " ": {
        " ": ops.flow.Label,
        "\t": ops.flow.Call,
        "\n": ops.flow.Jump
      },
      "\t": {
        " ": ops.flow.JumpZero,
        "\t": ops.flow.JumpNegative,
        "\n": ops.flow.Return
      },
      "\n": {
        "\n": ops.flow.End
      }
    }
  };

  (function() {
    var chk;
    chk = function(obj, str) {
      var key, value;
      for (key in obj) {
        value = obj[key];
        if ("function" === typeof value) {
          value.code = str + key;
        } else {
          chk(value, str + key);
        }
      }
    };
    return chk(opsTable, "");
  })();

}).call(this);
